/// <reference types="node" />
import { EventEmitter } from "events";
import type { BaseNode } from "../base/Node.js";
import type { EqualizerBand, FilterOptions, JoinOptions, PlayerOptions, Track, VoiceServerUpdate, VoiceStateUpdate } from "../types/index.js";
import { Status } from "../types/index.js";
export declare class Player<T extends BaseNode = BaseNode> extends EventEmitter {
    readonly node: T;
    guildId: string;
    status: Status;
    constructor(node: T, guildId: string);
    get playing(): boolean;
    get paused(): boolean;
    get voiceState(): VoiceStateUpdate | undefined;
    get voiceServer(): VoiceServerUpdate | undefined;
    moveTo(node: BaseNode): Promise<void>;
    leave(): Promise<any>;
    join(channel: string | null, { deaf, mute }?: JoinOptions): Promise<any>;
    play(track: string | Track, { start, end, noReplace, pause }?: PlayerOptions): Promise<void>;
    setVolume(vol: number): Promise<void>;
    setEqualizer(bands: EqualizerBand[]): Promise<void>;
    setFilters(options: FilterOptions): Promise<void>;
    seek(position: number): Promise<void>;
    pause(paused?: boolean): Promise<void>;
    stop(): Promise<void>;
    destroy(): Promise<void>;
    voiceUpdate(sessionId: string, event: VoiceServerUpdate): Promise<void>;
    send(op: string, d?: object): Promise<void>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCluster = void 0;
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */
const events_1 = require("events");
const ClusterNode_js_1 = tslib_1.__importDefault(require("../ClusterNode.js"));
class BaseCluster extends events_1.EventEmitter {
    nodes = [];
    constructor(options) {
        super();
        if (options) {
            this.spawn(options);
        }
    }
    connect() {
        for (const node of this.nodes) {
            node.connect();
        }
    }
    spawn(options) {
        if (Array.isArray(options)) {
            return options.map((opt) => this.spawn(opt));
        }
        const node = new ClusterNode_js_1.default(this, options);
        this.nodes.push(node);
        return node;
    }
    sort() {
        return this.nodes
            .filter((n) => n.connected)
            .sort((a, b) => {
            // sort by overall system cpu load
            if (!a.stats || !b.stats) {
                return -1;
            }
            return ((a.stats.cpu ? a.stats.cpu.systemLoad / a.stats.cpu.cores : 0) -
                (b.stats.cpu ? b.stats.cpu.systemLoad / b.stats.cpu.cores : 0));
        });
    }
    getNode(guildId) {
        let node = this.nodes.find((nodeX) => nodeX.players.has(guildId));
        if (!node) {
            node = this.sort().find((nodeX) => this.filter(nodeX, guildId));
        }
        if (node) {
            return node;
        }
        throw new Error("unable to find appropriate node; please check your filter");
    }
    has(guildId) {
        return this.nodes.some((node) => node.players.has(guildId));
    }
    get(guildId) {
        return this.getNode(guildId).players.get(guildId);
    }
    voiceStateUpdate(state) {
        return this.getNode(state.guild_id).voiceStateUpdate(state);
    }
    voiceServerUpdate(server) {
        return this.getNode(server.guild_id).voiceServerUpdate(server);
    }
}
exports.BaseCluster = BaseCluster;
//# sourceMappingURL=Cluster.js.map
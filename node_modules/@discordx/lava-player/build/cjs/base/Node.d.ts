/// <reference types="node" />
import { EventEmitter } from "events";
import { Connection } from "../core/Connection.js";
import { Http } from "../core/Http.js";
import PlayerStore from "../core/PlayerStore.js";
import type { BaseNodeOptions, Track, TrackInfo, TrackResponse, VoiceServerUpdate, VoiceStateUpdate } from "../types/index.js";
export declare abstract class BaseNode extends EventEmitter {
    abstract send: (guildId: string, packet: any) => Promise<any>;
    password: string;
    userId: string;
    shardCount?: number;
    connection: Connection;
    players: PlayerStore<this>;
    http: Http;
    voiceStates: Map<string, VoiceStateUpdate>;
    voiceServers: Map<string, VoiceServerUpdate>;
    private _expectingConnection;
    constructor({ password, userId, shardCount, host }: BaseNodeOptions);
    get connected(): boolean;
    load(identifier: string): Promise<TrackResponse>;
    decode(track: string): Promise<TrackInfo>;
    decode(tracks: string[]): Promise<Track[]>;
    voiceStateUpdate(packet: VoiceStateUpdate): Promise<boolean>;
    voiceServerUpdate(packet: VoiceServerUpdate): Promise<boolean>;
    connect(): void;
    disconnect(code?: number, data?: string): Promise<void>;
    destroy(code?: number, data?: string): Promise<void>;
    private _tryConnection;
}

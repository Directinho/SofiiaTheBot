/// <reference types="node" />
import { EventEmitter } from "events";
import type { ClusterNodeOptions } from "../ClusterNode.js";
import ClusterNode from "../ClusterNode.js";
import type { Player } from "../core/Player.js";
import type { VoiceServerUpdate, VoiceStateUpdate } from "../types/index.js";
export declare abstract class BaseCluster extends EventEmitter {
    abstract send: (guildId: string, packet: any) => any;
    abstract filter: (node: ClusterNode, guildId: string) => boolean;
    readonly nodes: ClusterNode[];
    constructor(options?: ClusterNodeOptions[]);
    connect(): void;
    spawn(options: ClusterNodeOptions): ClusterNode;
    spawn(options: ClusterNodeOptions[]): ClusterNode[];
    sort(): ClusterNode[];
    getNode(guildId: string): ClusterNode;
    has(guildId: string): boolean;
    get(guildId: string): Player<ClusterNode>;
    voiceStateUpdate(state: VoiceStateUpdate): Promise<boolean>;
    voiceServerUpdate(server: VoiceServerUpdate): Promise<boolean>;
}

/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { IncomingHttpHeaders, IncomingMessage } from "http";
import { URL } from "url";
import type { BaseNode } from "../base/Node.js";
import type { Track, TrackInfo, TrackResponse } from "../types/index.js";
import RoutePlanner from "./RoutePlanner.js";
export declare class HTTPError extends Error {
    method: string;
    statusCode: number;
    headers: IncomingHttpHeaders;
    path: string;
    get statusMessage(): string | undefined;
    constructor(httpMessage: IncomingMessage, method: string, url: URL);
}
export declare class Http {
    readonly node: BaseNode;
    input: string;
    base?: string;
    routePlanner: RoutePlanner;
    constructor(node: BaseNode, input: string, base?: string);
    url(): URL;
    load(identifier: string): Promise<TrackResponse>;
    decode(track: string): Promise<TrackInfo>;
    decode(tracks: string[]): Promise<Track[]>;
    decode(tracks: string | string[]): Promise<TrackInfo | Track[]>;
    do<T = any>(method: string, url: URL, data?: Buffer): Promise<T>;
}

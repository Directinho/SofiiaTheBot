/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable camelcase */
import { EventEmitter } from "events";
import { EventType, Status } from "../types/index.js";
export class Player extends EventEmitter {
    node;
    guildId;
    status = Status.INSTANTIATED;
    constructor(node, guildId) {
        super();
        this.node = node;
        this.guildId = guildId;
        this.on("event", (d) => {
            switch (d.type) {
                case EventType.TrackStartEvent:
                    this.status = Status.PLAYING;
                    break;
                case EventType.TrackEndEvent:
                    if (d.reason !== "REPLACED") {
                        this.status = Status.ENDED;
                    }
                    break;
                case EventType.TrackExceptionEvent:
                    this.status = Status.ERRORED;
                    break;
                case EventType.TrackStuckEvent:
                    this.status = Status.STUCK;
                    break;
                case EventType.WebSocketClosedEvent:
                    this.status = Status.ENDED;
                    break;
                default:
                    this.status = Status.UNKNOWN;
                    break;
            }
        });
    }
    get playing() {
        return this.status === Status.PLAYING;
    }
    get paused() {
        return this.status === Status.PAUSED;
    }
    get voiceState() {
        const state = this.node.voiceStates.get(this.guildId);
        if (!state) {
            return;
        }
        return state;
    }
    get voiceServer() {
        return this.node.voiceServers.get(this.guildId);
    }
    async moveTo(node) {
        if (this.node === node) {
            return;
        }
        if (!this.voiceServer || !this.voiceState) {
            throw new Error("no voice state/server data to move");
        }
        await this.destroy();
        await Promise.all([
            node.voiceStateUpdate(this.voiceState),
            node.voiceServerUpdate(this.voiceServer),
        ]);
    }
    leave() {
        return this.join(null);
    }
    join(channel, { deaf = false, mute = false } = {}) {
        this.node.voiceServers.delete(this.guildId);
        this.node.voiceStates.delete(this.guildId);
        return this.node.send(this.guildId, {
            d: {
                channel_id: channel,
                guild_id: this.guildId,
                self_deaf: deaf,
                self_mute: mute,
            },
            op: 4,
        });
    }
    async play(track, { start, end, noReplace, pause } = {}) {
        await this.send("play", {
            endTime: end,
            noReplace,
            pause,
            startTime: start,
            track: typeof track === "object" ? track.track : track,
        });
        this.status = Status.PLAYING;
    }
    setVolume(vol) {
        return this.send("volume", { volume: vol });
    }
    setEqualizer(bands) {
        return this.send("equalizer", { bands });
    }
    setFilters(options) {
        return this.send("filters", options);
    }
    seek(position) {
        return this.send("seek", { position });
    }
    async pause(paused = true) {
        await this.send("pause", { pause: paused });
        if (paused) {
            this.status = Status.PAUSED;
        }
        else {
            this.status = Status.PLAYING;
        }
    }
    async stop() {
        await this.send("stop");
        this.status = Status.ENDED;
    }
    async destroy() {
        if (this.node.connected) {
            await this.send("destroy");
        }
        this.status = Status.ENDED;
        this.node.players.delete(this.guildId);
    }
    voiceUpdate(sessionId, event) {
        return this.send("voiceUpdate", {
            event,
            sessionId,
        });
    }
    send(op, d = {}) {
        const conn = this.node.connection;
        if (conn) {
            return conn.send(Object.assign({
                guildId: this.guildId,
                op,
            }, d));
        }
        else {
            return Promise.reject(new Error("no WebSocket connection available"));
        }
    }
}
//# sourceMappingURL=Player.js.map